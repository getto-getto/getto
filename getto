#!/usr/bin/env php
<?php
# root
define("ROOT", getcwd());
# version
define("VERSION", "1.0.0");
# text styles
define("TEXT_NONE",         "\e[0m");
define("TEXT_BOLD",         "\e[1m");
define("TEXT_COLOR_RED",    "\e[0;31m");
define("TEXT_COLOR_GREEN",  "\e[0;32m");
define("TEXT_COLOR_YELLOW", "\e[0;33m");
# source url's
# https://raw.githubusercontent.com/%s/master/<SOURCE.[conf,json]>
# https://github.com/<NAMESPACE>/archive/<BRANCH [master, 3.1.0, ...]>.zip
define("SRC_URL_ZIP_GITHUB",  "https://github.com/%s/archive/%s>.zip");
define("SRC_URL_CONF_GITHUB", "https://raw.githubusercontent.com/%s/master/%s");

# header
_print(TEXT_BOLD);
_print("***********************************\n");
_print("*** Getto [PHP Package Manager] ***\n");
_print("***********************************\n");
_print(TEXT_NONE);

if (PHP_SAPI != "cli") {
    _print_fail("Use only in CLI!\n", 1);
}

# conf
static $CONF = array();
static $CONF_FILE = ROOT ."/getto.conf";
static $CONF_LOCK_FILE = ROOT ."/getto.conf.lock";
# args
static $ARGV = array();
static $ARGC = 0;
$ARGV = getopt("i:u:r:c:h::v::", array("all", "self", "force",
    "install", "update", "remove", "check", "help", "version"));
$ARGC = count($ARGV);
_print($ARGV);

if (getto_argc() == 0) {
    _print_fail("No enough arguments!\n", 1);
}

switch (getto_argv(0)) {
    case "-i":
    case "--install":
        getto_run_install();
        break;
    case "-h":
    case "--help":
        getto_run_help();
        break;
    case "-v":
    case "--version":
        getto_run_version();
        break;
    default:
        // fail!
}

# arg stuff
function getto_argc() {
    global $ARGC;
    return $ARGC;
}
function getto_argv($i) {
    if (is_int($i)) {
        $argv = $GLOBALS["argv"];
        array_shift($argv);
        if (isset($argv[$i])) {
            return $argv[$i];
        }
        return null;
    }
    global $ARGV;
    if (isset($ARGV[$i])) {
        return $ARGV[$i];
    }
    return null;
}

# run stuff
function getto_run_install() {
    $package = getto_argv("i");
    if ($package != "--all") {
        return getto_package_install($package);
    }
    return getto_package_install_all();
}
function getto_run_help() {
    _print("
--- Usage
    getto -option [--extra-option, [, --extra-option]]
    getto -option [@package | '@package @version'] | [--extra-option, [, --extra-option]]

--- Options
    -i, --install   Install package(s).
    -u, --update    Update package(s).
    -r, --remove    Update a package.
    -c, --check     Check package(s) for newer version(s).
    -h, --help      Display help.
    -v, --version   Display version.

--- Extra Options
    --all           Install, update or check all.
    --self          Update Getto.
    --force         Force to overwrite on current package even same version.

--- Examples
    # install
    getto -i --all
    getto -i phpunit/phpunit
    getto -i 'phpunit/phpunit 3.0'
    # check
    getto -c --all
    getto -c --self
    getto -c phpunit/phpunit
    # update
    getto -u --all
    getto -u --self
    getto -u phpunit/phpunit
    # remove
    getto -r phpunit/phpunit
");
}
function getto_run_version() {
    _print("Getto/v". VERSION ."\n");
}

function getto_remote_url($url, $url_for, $repo_name, $repo_conf) {
    if ($url_for == "conf") {
        if ($repo_conf == "") {
            $repo_conf = "getto.conf";
        }
        return sprintf(SRC_URL_CONF_GITHUB, $repo_name, $repo_conf);
    }
}
function getto_remote_conf($url) {
    $result = null;
    $tp = sprintf("/tmp/getto_%s.%s", md5($url), basename($url));
    return $tp;
    if (!is_file($tp)) {
        touch($tp);
    }
    $fp = fopen($tp, "w+");
    if ($tp && $fp) {
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_FILE, $fp);
        curl_setopt($ch, CURLOPT_TIMEOUT, 300);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_USERAGENT, "Getto/v". VERSION);
        $result = curl_exec($ch);
        if ($result === false) {
            _print_fail("cURL fail: %s, %s\n", -1, curl_errno($ch), curl_error($ch));
        } else {
            $result = $tp;
        }
        curl_close($ch);
        fclose($fp);
    }
    return $result;
}
function getto_remote_zip_get($url) {

}
function getto_remote_zip_extract($zip) {}

function getto_package_install($name) {
    var_dump($name);
}
function getto_package_install_all() {
    $conf = getto_conf_parse_local();
    _print($conf);
    return;
    # put foreach here and call in getto_package_install()
    $name = _dig($conf, "import.name");
    $link = _dig($conf, "import.link");
    $config = _dig($conf, "import.config");
    $version = _dig($conf, "import.version", "master");
    if ($config == "composer.json") { # remove this control, automatize
        $config_url = getto_remote_url($link, "conf", $name, "composer.json");
        _print_success("Getting remove configration from '%s'...\n", $config_url);
        $config_file = getto_remote_conf($config_url);
        if ($config_file != null) {
            $config = getto_conf_parse($config_file);
            if (empty($config)) {
                _print_fail("Could not get composer.json from %s\n", -1, $name);
                _print_fail("Skipping...\n");
            }
            $info = getto_package_installed_info($name);
            if ($version = _dig($info, "import.version")) {
                _print_none("Installed version of %s is '%s'.\n", $name, $version);
            } else {
                _print_none("Installed version of %s is '%s'.\n", $name, "none");
            }
            _print_none("Requested version of %s is '%s'.\n", $name, $version);
            _print_none("Achieved version of %s is '%s'.\n", $name, $config["version"]);
        }
    }
}
function getto_package_installed_info($name) {
    global $CONF_LOCK_FILE;
    if (!is_file($CONF_LOCK_FILE)) {
        return null;
    }
    return getto_conf_parse_file($CONF_LOCK_FILE);
}

function getto_conf_dig($conf, $key) {
    $conf = (array) $conf;
}
function getto_conf_parse($file) {
    if (strrpos($file, ".conf")) {
        return getto_conf_parse_file($file);
    } elseif (strrpos($file, ".json")) {
        return getto_conf_parse_json($file);
    }
}
function getto_conf_parse_local() {
    global $CONF, $CONF_FILE;
    if (empty($CONF)) {
        $CONF = getto_conf_parse_file($CONF_FILE);
        if (!isset($CONF["import"]["name"])) {
            _print_warn("'import.name' field is not found in configration file.\n");
        }
        if (!isset($CONF["import"]["link"])) {
            _print_warn("'import.link' field is not found in configration file.\n");
        }
    }
    return $CONF;
}
function getto_conf_parse_json($file) {
    if (!is_file($file)) {
        _print_fail("Configration file not found! file: '%s'.\n", 1, $file);
    }
    return json_decode(file_get_contents($file), true);
}
function getto_conf_parse_file($file) {
    if (!is_file($file)) {
        _print_fail("Configration file not found! file: '%s'.\n", 1, $file);
    }
    $conf = array();
    $lines = getto_conf_parse_file_lines($file);
    $lines_length = count($lines);
    foreach ($lines as $i => $line) {
        if ($line[0] == "@") {
            if (substr($line, -2) == "[]") {
                $conf_i = 0;
                $conf_key = trim($line, "@[]");
                if (!isset($conf[$conf_key][$conf_i])) {
                    $conf[$conf_key][$conf_i] = array();
                }
            }
            for ($ii = $i + 1; $line_next =@ $lines[$ii]; $ii++) {
                if ($line_next[0] == "@") {
                    break;
                }
                @list($key, $value) =
                    array_map("trim", explode("=", $line_next, 2));
                if (isset($key, $value)) {
                    $conf[$conf_key][$conf_i][$key] = trim($value, "\"'");
                }
            }
            $conf_i++;
        }
    }
    return $conf;
}
function getto_conf_parse_file_lines($file) {
    $lines = file($file, FILE_IGNORE_NEW_LINES);
    $lines = array_map(function($line) {
        return preg_replace("~^#([^\r\n]*)~", "", trim($line));
    }, $lines);
    return array_values(array_filter($lines));
}

# util
function _dig(array $array = null, $key, $value = null) {
    if (isset($array[$key])) {
        $value = $array[$key];
    } else {
        $value =& $array;
        foreach (explode(".", $key) as $key) {
            $value =& $value[$key];
        }
    }
    return $value;
}
function _print($arg) {
    fwrite(STDOUT, print_r($arg, true));
}
function _printn($arg) {
    fwrite(STDOUT, print_r($arg, true) ."\n");
}
function _printr(...$args) {
    $form = "";
    foreach ($args as $_) {
        $form .= "%s ";
    }
    _print(vsprintf($form, $args));
}
function _print_none($form, ...$args) {
    _print(vsprintf($form, $args));
}
function _print_fail($form, $e = -1, ...$args) {
    _print(vsprintf(TEXT_COLOR_RED . $form . TEXT_NONE, $args));
    if ($e > -1) {
        exit($e);
    }
}
function _print_warn($form, ...$args) {
    _print(vsprintf(TEXT_COLOR_YELLOW . $form . TEXT_NONE, $args));
}
function _print_success($form, ...$args) {
    _print(vsprintf(TEXT_COLOR_GREEN . $form . TEXT_NONE, $args));
}
