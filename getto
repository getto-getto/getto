#!/usr/bin/env php
<?php
# root
define("ROOT", getcwd());
# version
define("VERSION", "1.0.0");
# text styles
define("TEXT_NONE",         "\e[0m");
define("TEXT_BOLD",         "\e[1m");
define("TEXT_COLOR_RED",    "\e[0;31m");
define("TEXT_COLOR_GREEN",  "\e[0;32m");
define("TEXT_COLOR_YELLOW", "\e[0;33m");
# source url's
# https://github.com/<NAMESPACE>/raw/master/<SOURCE>.json
# https://github.com/<NAMESPACE>/archive/<BRANCH [master, 3.1.0, ...]>.zip
define("SRC_URL_ZIP_GITHUB",  "https://github.com/%s/archive/%s>.zip");
define("SRC_URL_CONF_GITHUB", "https://github.com/%s/raw/master/%s.json");

# header
_print(TEXT_BOLD);
_print("***********************************\n");
_print("*** Getto [PHP Package Manager] ***\n");
_print("***********************************\n");
_print(TEXT_NONE);

if (PHP_SAPI != "cli") {
    _print_fail("Use only in CLI!\n", 1);
}

# conf
static $CONF = array();
# args
static $ARGV = array();
static $ARGC = 0;
$ARGV = getopt("i:u:r:c:h::v::", array("all", "self", "force",
    "install", "update", "remove", "check", "help", "version"));
$ARGC = count($ARGV);
_print($ARGV);

if (getto_argc() == 0) {
    _print_fail("No enough arguments!\n", 1);
}

switch (getto_argv(0)) {
    case "-i":
    case "--install":
        getto_run_install();
        break;
    case "-h":
    case "--help":
        getto_run_help();
        break;
    case "-v":
    case "--version":
        getto_run_version();
        break;
    default:
        // fail!
}

# arg stuff
function getto_argc() {
    global $ARGC;
    return $ARGC;
}
function getto_argv($i) {
    if (is_int($i)) {
        $argv = $GLOBALS["argv"];
        array_shift($argv);
        if (isset($argv[$i])) {
            return $argv[$i];
        }
        return null;
    }
    global $ARGV;
    if (isset($ARGV[$i])) {
        return $ARGV[$i];
    }
    return null;
}

# run stuff
function getto_run_install() {
    $package = getto_argv("i");
    if ($package != "--all") {
        return getto_install_package($package);
    }
    return getto_install_package_all();
}
function getto_run_help() {
    _print("
--- Usage
    getto -option [--extra-option, [, --extra-option]]
    getto -option [@package | '@package @version'] | [--extra-option, [, --extra-option]]

--- Options
    -i, --install   Install package(s).
    -u, --update    Update package(s).
    -r, --remove    Update a package.
    -c, --check     Check package(s) for newer version(s).
    -h, --help      Display help.
    -v, --version   Display version.

--- Extra Options
    --all           Install, update or check all.
    --self          Update Getto.
    --force         Force to overwrite on current package even same version.

--- Examples
    # install
    getto -i --all
    getto -i phpunit/phpunit
    getto -i 'phpunit/phpunit 3.0'
    # check
    getto -c --all
    getto -c --self
    getto -c phpunit/phpunit
    # update
    getto -u --all
    getto -u --self
    getto -u phpunit/phpunit
    # remove
    getto -r phpunit/phpunit
");
}
function getto_run_version() {
    _print("Getto/v". VERSION ."\n");
}

function getto_remote_ping($url) {
    $tmp = tempnam("/tmp", "getto");
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_FILE, $tmp);
    curl_setopt($ch, CURLOPT_TIMEOUT, 5);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    // curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $result = curl_exec($ch);
    if ($result === false) {
        _print_fail("cURL: %s, %s\n", curl_errno($ch), curl_error($ch));
    } else {
        $result = file_get_contents($tmp);
    }
    curl_close($ch);
    @unlink($tmp);
    return $result;
}
function getto_remote_zip_get($url) {

}
function getto_remote_zip_extract($zip) {}

function getto_install_package_all() {
    $conf = getto_conf_get();
    _print($conf);
    $link = _dig($conf, "@import.link");
    # default github?
    if ($link == "github.com") {
    }
    var_dump($link);
}

function getto_conf_get($key = null) {
    $conf = getto_conf_parse();
    if ($key === null) {
        return $conf;
    }
    return isset($conf[$key]) ? $conf[$key] : null;
}
function getto_conf_parse() {
    global $CONF;
    if (empty($CONF)) {
        if (!is_file(ROOT ."/getto.conf")) {
            _print_fail("No configration found!\n", 1);
        }
        function _lines() {
            $lines = file(ROOT ."/getto.conf", FILE_IGNORE_NEW_LINES);
            $lines = array_map(function($line) {
                return preg_replace("~^#([^\r\n]*)~", "", trim($line));
            }, $lines);
            $lines = array_values(array_filter($lines));
            return $lines;
        }
        $lines = _lines();
        $lines_length = count($lines);
        foreach ($lines as $i => $line) {
            if ($line[0] == "@") {
                $CONF[$line] = array();
                for ($ii = $i + 1; $line_next =@ $lines[$ii]; $ii++) {
                    if ($line_next[0] == "@") {
                        break;
                    }
                    @list($key, $value) =
                        array_map("trim", explode("=", $line_next, 2));
                    if (isset($key, $value)) {
                        $CONF[$line][$key] = $value;
                    }
                }
            }
        }
        if (!isset($CONF["@import"]["name"])) {
            _print_warn("'@import.name' field is not found in configration file.\n");
        }
        if (!isset($CONF["@import"]["link"])) {
            _print_warn("'@import.link' field is not found in configration file.\n");
        }
    }
    return $CONF;
}

# util
function _dig(array $array, $key, $value = null) {
    if (isset($array[$key])) {
        $value = $array[$key];
    } else {
        $value =& $array;
        foreach (explode(".", $key) as $key) {
            $value =& $value[$key];
        }
    }
    return $value;
}
function _print($arg) {
    fwrite(STDOUT, print_r($arg, true));
}
function _printn($arg) {
    fwrite(STDOUT, print_r($arg, true) ."\n");
}
function _printr(...$args) {
    $form = "";
    foreach ($args as $_) {
        $form .= "%s ";
    }
    _print(vsprintf($form, $args));
}
function _print_fail($arg, $e = -1) {
    _print(TEXT_COLOR_RED ."Fail: {$arg}". TEXT_NONE);
    if ($e > -1) {
        exit($e);
    }
}
function _print_warn($arg) {
    _print(TEXT_COLOR_YELLOW ."Warning: {$arg}". TEXT_NONE);
}
